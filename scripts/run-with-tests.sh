#!/bin/bash

# Script para ejecutar la aplicaci√≥n con validaci√≥n previa de tests
# Proporciona diferentes niveles de validaci√≥n seg√∫n el contexto

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Emojis para mejor UX
CHECK="‚úÖ"
CROSS="‚ùå"
ROCKET="üöÄ"
TEST="üß™"
POSTGRES="üêò"
LIGHTNING="‚ö°"
GEAR="‚öôÔ∏è"
SHIELD="üõ°Ô∏è"

# Funciones de utilidad
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${PURPLE}[STEP]${NC} $1"
}

# Funci√≥n para mostrar header del script
show_header() {
    echo ""
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë               ${ROCKET} ECOMMERCE APP LAUNCHER ${ROCKET}                    ‚ïë${NC}"
    echo -e "${CYAN}‚ïë              Ejecuci√≥n con Validaci√≥n de Tests              ‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

# Funci√≥n para verificar si Docker est√° corriendo
check_docker() {
    if ! docker info &> /dev/null; then
        log_error "Docker no est√° corriendo. Por favor, inicia Docker."
        exit 1
    fi
}

# Funci√≥n para ejecutar tests SQLite
run_sqlite_tests() {
    log_step "${TEST} Ejecutando tests con SQLite (r√°pido)..."
    if python -m pytest tests/ -v --tb=short; then
        log_success "${CHECK} Tests SQLite pasaron exitosamente"
        return 0
    else
        log_error "${CROSS} Tests SQLite fallaron"
        return 1
    fi
}

# Funci√≥n para ejecutar tests PostgreSQL
run_postgres_tests() {
    log_step "${POSTGRES} Ejecutando tests con PostgreSQL (producci√≥n-like)..."
    if ./scripts/test-with-postgres.sh test; then
        log_success "${CHECK} Tests PostgreSQL pasaron exitosamente"
        return 0
    else
        log_error "${CROSS} Tests PostgreSQL fallaron"
        return 1
    fi
}

# Funci√≥n para ejecutar tests unitarios √∫nicamente
run_unit_tests() {
    log_step "${LIGHTNING} Ejecutando solo tests unitarios (s√∫per r√°pido)..."
    if python -m pytest tests/test_models tests/test_schemas tests/test_services -v --tb=short -m "not integration"; then
        log_success "${CHECK} Tests unitarios pasaron exitosamente"
        return 0
    else
        log_error "${CROSS} Tests unitarios fallaron"
        return 1
    fi
}

# Funci√≥n para ejecutar tests con cobertura
run_coverage_tests() {
    log_step "${SHIELD} Ejecutando tests con cobertura..."
    if python -m pytest tests/ --cov=app --cov-report=term-missing --cov-fail-under=80; then
        log_success "${CHECK} Tests de cobertura pasaron exitosamente"
        return 0
    else
        log_error "${CROSS} Tests de cobertura fallaron o cobertura insuficiente"
        return 1
    fi
}

# Funci√≥n para iniciar la aplicaci√≥n
start_application() {
    local mode="$1"
    
    case "$mode" in
        "dev")
            log_step "${GEAR} Iniciando aplicaci√≥n en modo desarrollo..."
            make dev
            ;;
        "up")
            log_step "${ROCKET} Iniciando aplicaci√≥n (solo up)..."
            make up
            ;;
        "prod")
            log_step "${ROCKET} Iniciando aplicaci√≥n en modo producci√≥n..."
            make prod
            ;;
        *)
            log_step "${ROCKET} Iniciando aplicaci√≥n..."
            make up
            ;;
    esac
}

# Funci√≥n para mostrar ayuda
show_help() {
    show_header
    echo "Uso: $0 [MODO] [OPCIONES]"
    echo ""
    echo "Modos de ejecuci√≥n:"
    echo "  quick         ${LIGHTNING} Inicio r√°pido (solo tests unitarios + up)"
    echo "  safe          ${TEST} Desarrollo seguro (tests SQLite + dev)"
    echo "  postgres      ${POSTGRES} Validaci√≥n completa (tests PostgreSQL + dev)"
    echo "  deploy        ${SHIELD} Validaci√≥n de deployment (todos los tests + prod)"
    echo "  coverage      ${SHIELD} Con validaci√≥n de cobertura (coverage + up)"
    echo ""
    echo "Opciones:"
    echo "  --up-only     Solo ejecutar 'make up' (sin logs)"
    echo "  --prod        Usar modo producci√≥n"
    echo "  --no-tests    Saltar tests (solo para emergencias)"
    echo ""
    echo "Ejemplos:"
    echo "  $0 quick                    # Desarrollo diario r√°pido"
    echo "  $0 safe                     # Desarrollo con validaci√≥n SQLite"
    echo "  $0 postgres                 # Validaci√≥n completa con PostgreSQL"
    echo "  $0 deploy                   # Validaci√≥n completa para deployment"
    echo "  $0 coverage --up-only       # Tests con cobertura + solo up"
    echo ""
}

# Funci√≥n principal
main() {
    local mode="${1:-safe}"
    local up_only=false
    local prod_mode=false
    local skip_tests=false
    
    # Procesar argumentos
    shift || true
    while [[ $# -gt 0 ]]; do
        case $1 in
            --up-only)
                up_only=true
                shift
                ;;
            --prod)
                prod_mode=true
                shift
                ;;
            --no-tests)
                skip_tests=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                log_error "Opci√≥n desconocida: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    show_header
    
    # Verificar Docker
    check_docker
    
    # Determinar el modo de inicio de aplicaci√≥n
    local app_mode="dev"
    if [[ "$up_only" == true ]]; then
        app_mode="up"
    elif [[ "$prod_mode" == true ]]; then
        app_mode="prod"
    fi
    
    # Ejecutar seg√∫n el modo seleccionado
    case "$mode" in
        "quick")
            log_info "${LIGHTNING} Modo r√°pido: Solo tests unitarios"
            if [[ "$skip_tests" == false ]]; then
                run_unit_tests || exit 1
            fi
            start_application "$app_mode"
            ;;
            
        "safe")
            log_info "${TEST} Modo seguro: Tests SQLite completos"
            if [[ "$skip_tests" == false ]]; then
                run_sqlite_tests || exit 1
            fi
            start_application "$app_mode"
            ;;
            
        "postgres")
            log_info "${POSTGRES} Modo PostgreSQL: Validaci√≥n completa"
            if [[ "$skip_tests" == false ]]; then
                run_postgres_tests || exit 1
            fi
            start_application "$app_mode"
            ;;
            
        "deploy")
            log_info "${SHIELD} Modo deployment: Validaci√≥n exhaustiva"
            if [[ "$skip_tests" == false ]]; then
                log_step "Validaci√≥n 1/3: Tests SQLite"
                run_sqlite_tests || exit 1
                
                log_step "Validaci√≥n 2/3: Tests PostgreSQL"
                run_postgres_tests || exit 1
                
                log_step "Validaci√≥n 3/3: Cobertura de c√≥digo"
                run_coverage_tests || exit 1
            fi
            start_application "prod"
            ;;
            
        "coverage")
            log_info "${SHIELD} Modo cobertura: Tests con m√©tricas"
            if [[ "$skip_tests" == false ]]; then
                run_coverage_tests || exit 1
            fi
            start_application "$app_mode"
            ;;
            
        "help"|"-h"|"--help")
            show_help
            exit 0
            ;;
            
        *)
            log_error "Modo desconocido: $mode"
            show_help
            exit 1
            ;;
    esac
    
    echo ""
    log_success "${ROCKET} ¬°Aplicaci√≥n iniciada exitosamente!"
    echo ""
    log_info "Puedes acceder a:"
    log_info "  ‚Ä¢ API: http://localhost:8000"
    log_info "  ‚Ä¢ Docs: http://localhost:8000/docs"
    log_info "  ‚Ä¢ Redoc: http://localhost:8000/redoc"
    echo ""
    log_info "Para ver logs en tiempo real: make logs"
    log_info "Para detener la aplicaci√≥n: make down"
    echo ""
}

# Verificar si el script se est√° ejecutando directamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
